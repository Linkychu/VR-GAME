//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/1/GlobalControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GlobalControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GlobalControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GlobalControls"",
    ""maps"": [
        {
            ""name"": ""Gun"",
            ""id"": ""eaa17078-fed5-47d2-a1cc-c92c78801f40"",
            ""actions"": [
                {
                    ""name"": ""ChangeGunUp"",
                    ""type"": ""Value"",
                    ""id"": ""b53ffd3d-4409-4462-a63b-8196d457c5c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeGunDown"",
                    ""type"": ""Value"",
                    ""id"": ""e48d536d-849f-41dc-a4d2-538c74f24bb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d133f24-6b2d-4492-9bfc-d21d16a2285b"",
                    ""path"": ""<XRController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Controller"",
                    ""action"": ""ChangeGunUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1098e2e0-4ddd-4a55-964a-94dd85460e58"",
                    ""path"": ""<XRController>/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Controller"",
                    ""action"": ""ChangeGunDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XR Controller"",
            ""bindingGroup"": ""XR Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gun
        m_Gun = asset.FindActionMap("Gun", throwIfNotFound: true);
        m_Gun_ChangeGunUp = m_Gun.FindAction("ChangeGunUp", throwIfNotFound: true);
        m_Gun_ChangeGunDown = m_Gun.FindAction("ChangeGunDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gun
    private readonly InputActionMap m_Gun;
    private IGunActions m_GunActionsCallbackInterface;
    private readonly InputAction m_Gun_ChangeGunUp;
    private readonly InputAction m_Gun_ChangeGunDown;
    public struct GunActions
    {
        private @GlobalControls m_Wrapper;
        public GunActions(@GlobalControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeGunUp => m_Wrapper.m_Gun_ChangeGunUp;
        public InputAction @ChangeGunDown => m_Wrapper.m_Gun_ChangeGunDown;
        public InputActionMap Get() { return m_Wrapper.m_Gun; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GunActions set) { return set.Get(); }
        public void SetCallbacks(IGunActions instance)
        {
            if (m_Wrapper.m_GunActionsCallbackInterface != null)
            {
                @ChangeGunUp.started -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunUp;
                @ChangeGunUp.performed -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunUp;
                @ChangeGunUp.canceled -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunUp;
                @ChangeGunDown.started -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunDown;
                @ChangeGunDown.performed -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunDown;
                @ChangeGunDown.canceled -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunDown;
            }
            m_Wrapper.m_GunActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeGunUp.started += instance.OnChangeGunUp;
                @ChangeGunUp.performed += instance.OnChangeGunUp;
                @ChangeGunUp.canceled += instance.OnChangeGunUp;
                @ChangeGunDown.started += instance.OnChangeGunDown;
                @ChangeGunDown.performed += instance.OnChangeGunDown;
                @ChangeGunDown.canceled += instance.OnChangeGunDown;
            }
        }
    }
    public GunActions @Gun => new GunActions(this);
    private int m_XRControllerSchemeIndex = -1;
    public InputControlScheme XRControllerScheme
    {
        get
        {
            if (m_XRControllerSchemeIndex == -1) m_XRControllerSchemeIndex = asset.FindControlSchemeIndex("XR Controller");
            return asset.controlSchemes[m_XRControllerSchemeIndex];
        }
    }
    public interface IGunActions
    {
        void OnChangeGunUp(InputAction.CallbackContext context);
        void OnChangeGunDown(InputAction.CallbackContext context);
    }
}
