//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/1/GlobalControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GlobalControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GlobalControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GlobalControls"",
    ""maps"": [
        {
            ""name"": ""Gun"",
            ""id"": ""eaa17078-fed5-47d2-a1cc-c92c78801f40"",
            ""actions"": [
                {
                    ""name"": ""ChangeGunUp"",
                    ""type"": ""Button"",
                    ""id"": ""b53ffd3d-4409-4462-a63b-8196d457c5c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeGunDown"",
                    ""type"": ""Button"",
                    ""id"": ""e48d536d-849f-41dc-a4d2-538c74f24bb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b089357c-aac6-41a9-b144-6df33009034c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d133f24-6b2d-4492-9bfc-d21d16a2285b"",
                    ""path"": ""<XRController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Controller"",
                    ""action"": ""ChangeGunUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1098e2e0-4ddd-4a55-964a-94dd85460e58"",
                    ""path"": ""<XRController>/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Controller"",
                    ""action"": ""ChangeGunDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""704790cc-c6d8-4313-8618-750833da7b35"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""IceGun"",
            ""id"": ""d4600843-f5dc-428f-9034-6e1f54481868"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""3f0322b1-7ab7-4b2a-8f91-8039256188ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootIce"",
                    ""type"": ""Button"",
                    ""id"": ""847346b2-4d01-42a8-be60-08cdab4fc8a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b1d3e23a-5d0a-4841-a577-6beab4ccf75e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7be181ac-0382-4de3-b352-808b2de1d9d5"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootIce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Global"",
            ""id"": ""eebcfafb-e26b-4845-af6b-4668271216fe"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""b589def8-e123-459e-a0a7-88eab3f0ff4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eadec116-c19c-4415-8e8c-dee30d0b4a1c"",
                    ""path"": ""<XRController>{RightHand}/home"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eee04be8-3d4b-4dec-a54d-fc42e3b34bea"",
                    ""path"": ""<XRController>{LeftHand}/home"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Create"",
            ""id"": ""6754c520-dcd6-4032-a2fd-2c8f74c775b7"",
            ""actions"": [
                {
                    ""name"": ""Create"",
                    ""type"": ""Button"",
                    ""id"": ""792e9e87-50fd-4b29-816f-9fa13ce340a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Destroy"",
                    ""type"": ""Button"",
                    ""id"": ""6ea61324-94ea-483f-ac95-62374b88c323"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6aa2a0a6-77b1-4bb4-9d35-edb3989476ad"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Controller"",
                    ""action"": ""Create"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""397a009e-8626-4eed-bda0-9a0df278bca0"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destroy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XR Controller"",
            ""bindingGroup"": ""XR Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gun
        m_Gun = asset.FindActionMap("Gun", throwIfNotFound: true);
        m_Gun_ChangeGunUp = m_Gun.FindAction("ChangeGunUp", throwIfNotFound: true);
        m_Gun_ChangeGunDown = m_Gun.FindAction("ChangeGunDown", throwIfNotFound: true);
        m_Gun_Shoot = m_Gun.FindAction("Shoot", throwIfNotFound: true);
        // IceGun
        m_IceGun = asset.FindActionMap("IceGun", throwIfNotFound: true);
        m_IceGun_Newaction = m_IceGun.FindAction("New action", throwIfNotFound: true);
        m_IceGun_ShootIce = m_IceGun.FindAction("ShootIce", throwIfNotFound: true);
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_Pause = m_Global.FindAction("Pause", throwIfNotFound: true);
        // Create
        m_Create = asset.FindActionMap("Create", throwIfNotFound: true);
        m_Create_Create = m_Create.FindAction("Create", throwIfNotFound: true);
        m_Create_Destroy = m_Create.FindAction("Destroy", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gun
    private readonly InputActionMap m_Gun;
    private IGunActions m_GunActionsCallbackInterface;
    private readonly InputAction m_Gun_ChangeGunUp;
    private readonly InputAction m_Gun_ChangeGunDown;
    private readonly InputAction m_Gun_Shoot;
    public struct GunActions
    {
        private @GlobalControls m_Wrapper;
        public GunActions(@GlobalControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeGunUp => m_Wrapper.m_Gun_ChangeGunUp;
        public InputAction @ChangeGunDown => m_Wrapper.m_Gun_ChangeGunDown;
        public InputAction @Shoot => m_Wrapper.m_Gun_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Gun; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GunActions set) { return set.Get(); }
        public void SetCallbacks(IGunActions instance)
        {
            if (m_Wrapper.m_GunActionsCallbackInterface != null)
            {
                @ChangeGunUp.started -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunUp;
                @ChangeGunUp.performed -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunUp;
                @ChangeGunUp.canceled -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunUp;
                @ChangeGunDown.started -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunDown;
                @ChangeGunDown.performed -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunDown;
                @ChangeGunDown.canceled -= m_Wrapper.m_GunActionsCallbackInterface.OnChangeGunDown;
                @Shoot.started -= m_Wrapper.m_GunActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GunActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GunActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_GunActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeGunUp.started += instance.OnChangeGunUp;
                @ChangeGunUp.performed += instance.OnChangeGunUp;
                @ChangeGunUp.canceled += instance.OnChangeGunUp;
                @ChangeGunDown.started += instance.OnChangeGunDown;
                @ChangeGunDown.performed += instance.OnChangeGunDown;
                @ChangeGunDown.canceled += instance.OnChangeGunDown;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public GunActions @Gun => new GunActions(this);

    // IceGun
    private readonly InputActionMap m_IceGun;
    private IIceGunActions m_IceGunActionsCallbackInterface;
    private readonly InputAction m_IceGun_Newaction;
    private readonly InputAction m_IceGun_ShootIce;
    public struct IceGunActions
    {
        private @GlobalControls m_Wrapper;
        public IceGunActions(@GlobalControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_IceGun_Newaction;
        public InputAction @ShootIce => m_Wrapper.m_IceGun_ShootIce;
        public InputActionMap Get() { return m_Wrapper.m_IceGun; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IceGunActions set) { return set.Get(); }
        public void SetCallbacks(IIceGunActions instance)
        {
            if (m_Wrapper.m_IceGunActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_IceGunActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_IceGunActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_IceGunActionsCallbackInterface.OnNewaction;
                @ShootIce.started -= m_Wrapper.m_IceGunActionsCallbackInterface.OnShootIce;
                @ShootIce.performed -= m_Wrapper.m_IceGunActionsCallbackInterface.OnShootIce;
                @ShootIce.canceled -= m_Wrapper.m_IceGunActionsCallbackInterface.OnShootIce;
            }
            m_Wrapper.m_IceGunActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
                @ShootIce.started += instance.OnShootIce;
                @ShootIce.performed += instance.OnShootIce;
                @ShootIce.canceled += instance.OnShootIce;
            }
        }
    }
    public IceGunActions @IceGun => new IceGunActions(this);

    // Global
    private readonly InputActionMap m_Global;
    private IGlobalActions m_GlobalActionsCallbackInterface;
    private readonly InputAction m_Global_Pause;
    public struct GlobalActions
    {
        private @GlobalControls m_Wrapper;
        public GlobalActions(@GlobalControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Global_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void SetCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_GlobalActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GlobalActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GlobalActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_GlobalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public GlobalActions @Global => new GlobalActions(this);

    // Create
    private readonly InputActionMap m_Create;
    private ICreateActions m_CreateActionsCallbackInterface;
    private readonly InputAction m_Create_Create;
    private readonly InputAction m_Create_Destroy;
    public struct CreateActions
    {
        private @GlobalControls m_Wrapper;
        public CreateActions(@GlobalControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Create => m_Wrapper.m_Create_Create;
        public InputAction @Destroy => m_Wrapper.m_Create_Destroy;
        public InputActionMap Get() { return m_Wrapper.m_Create; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreateActions set) { return set.Get(); }
        public void SetCallbacks(ICreateActions instance)
        {
            if (m_Wrapper.m_CreateActionsCallbackInterface != null)
            {
                @Create.started -= m_Wrapper.m_CreateActionsCallbackInterface.OnCreate;
                @Create.performed -= m_Wrapper.m_CreateActionsCallbackInterface.OnCreate;
                @Create.canceled -= m_Wrapper.m_CreateActionsCallbackInterface.OnCreate;
                @Destroy.started -= m_Wrapper.m_CreateActionsCallbackInterface.OnDestroy;
                @Destroy.performed -= m_Wrapper.m_CreateActionsCallbackInterface.OnDestroy;
                @Destroy.canceled -= m_Wrapper.m_CreateActionsCallbackInterface.OnDestroy;
            }
            m_Wrapper.m_CreateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Create.started += instance.OnCreate;
                @Create.performed += instance.OnCreate;
                @Create.canceled += instance.OnCreate;
                @Destroy.started += instance.OnDestroy;
                @Destroy.performed += instance.OnDestroy;
                @Destroy.canceled += instance.OnDestroy;
            }
        }
    }
    public CreateActions @Create => new CreateActions(this);
    private int m_XRControllerSchemeIndex = -1;
    public InputControlScheme XRControllerScheme
    {
        get
        {
            if (m_XRControllerSchemeIndex == -1) m_XRControllerSchemeIndex = asset.FindControlSchemeIndex("XR Controller");
            return asset.controlSchemes[m_XRControllerSchemeIndex];
        }
    }
    public interface IGunActions
    {
        void OnChangeGunUp(InputAction.CallbackContext context);
        void OnChangeGunDown(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IIceGunActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnShootIce(InputAction.CallbackContext context);
    }
    public interface IGlobalActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface ICreateActions
    {
        void OnCreate(InputAction.CallbackContext context);
        void OnDestroy(InputAction.CallbackContext context);
    }
}
